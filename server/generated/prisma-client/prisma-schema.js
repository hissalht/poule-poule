module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLobby {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum CardType {
  EGG
  CHICKEN
  FOX
  DOG
  DUCK
}

type Lobby {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  cards: [CardType!]!
  password: String
}

type LobbyConnection {
  pageInfo: PageInfo!
  edges: [LobbyEdge]!
  aggregate: AggregateLobby!
}

input LobbyCreatecardsInput {
  set: [CardType!]
}

input LobbyCreateInput {
  id: ID
  name: String!
  users: UserCreateManyInput
  cards: LobbyCreatecardsInput
  password: String
}

type LobbyEdge {
  node: Lobby!
  cursor: String!
}

enum LobbyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type LobbyPreviousValues {
  id: ID!
  name: String!
  cards: [CardType!]!
  password: String
}

type LobbySubscriptionPayload {
  mutation: MutationType!
  node: Lobby
  updatedFields: [String!]
  previousValues: LobbyPreviousValues
}

input LobbySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LobbyWhereInput
  AND: [LobbySubscriptionWhereInput!]
  OR: [LobbySubscriptionWhereInput!]
  NOT: [LobbySubscriptionWhereInput!]
}

input LobbyUpdatecardsInput {
  set: [CardType!]
}

input LobbyUpdateInput {
  name: String
  users: UserUpdateManyInput
  cards: LobbyUpdatecardsInput
  password: String
}

input LobbyUpdateManyMutationInput {
  name: String
  cards: LobbyUpdatecardsInput
  password: String
}

input LobbyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [LobbyWhereInput!]
  OR: [LobbyWhereInput!]
  NOT: [LobbyWhereInput!]
}

input LobbyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLobby(data: LobbyCreateInput!): Lobby!
  updateLobby(data: LobbyUpdateInput!, where: LobbyWhereUniqueInput!): Lobby
  updateManyLobbies(data: LobbyUpdateManyMutationInput!, where: LobbyWhereInput): BatchPayload!
  upsertLobby(where: LobbyWhereUniqueInput!, create: LobbyCreateInput!, update: LobbyUpdateInput!): Lobby!
  deleteLobby(where: LobbyWhereUniqueInput!): Lobby
  deleteManyLobbies(where: LobbyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  lobby(where: LobbyWhereUniqueInput!): Lobby
  lobbies(where: LobbyWhereInput, orderBy: LobbyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lobby]!
  lobbiesConnection(where: LobbyWhereInput, orderBy: LobbyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LobbyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  lobby(where: LobbySubscriptionWhereInput): LobbySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  socketId: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  socketId: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  socketId_ASC
  socketId_DESC
}

type UserPreviousValues {
  id: ID!
  socketId: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  socketId: String
  socketId_not: String
  socketId_in: [String!]
  socketId_not_in: [String!]
  socketId_lt: String
  socketId_lte: String
  socketId_gt: String
  socketId_gte: String
  socketId_contains: String
  socketId_not_contains: String
  socketId_starts_with: String
  socketId_not_starts_with: String
  socketId_ends_with: String
  socketId_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  socketId: String
}

input UserUpdateInput {
  socketId: String
}

input UserUpdateManyDataInput {
  socketId: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  socketId: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  socketId: String
  socketId_not: String
  socketId_in: [String!]
  socketId_not_in: [String!]
  socketId_lt: String
  socketId_lte: String
  socketId_gt: String
  socketId_gte: String
  socketId_contains: String
  socketId_not_contains: String
  socketId_starts_with: String
  socketId_not_starts_with: String
  socketId_ends_with: String
  socketId_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    